ifopt --verbose verbose 1

do ifopt --help
	echo "
CBuild options:
    --help              Display this help message
    --verbose           Enable more verbose command printing

Target options:
    clean               Clean a previously compiled build
    --debug             Compile a debug build
    --debug-level=LVL	Set debug information level to LVL
    --optimize          Compile an optimized build
    --profile           Compile a profiling build
    --system=SYS        Compile a build for system SYS
                        (e.g i386, athlon64, etc.)

Installation options:
    install		Install to the installation path
    uninstall		Uninstall from the installation path
    --prefix=PATH	Set the installation path to PATH

    If unspecified, the default prefix is /usr/bin.

Package options:
    --skip-allegro      Do not use Allegro even if found
    --skip-allegrogl    Do not use AllegroGL even if found
    --skip-opengl       Do not use OpenGL even if found
    --skip-openal       Do not use OpenAL even if found
    --skip-pthreads     Do not use pthreads even if found
    --skip-sdl          Do not use SDL even if found

    --skip-hawknl       Do not compile and use HawkNL
    --skip-hawkthreads  Do not compile and use HawkThreads
    --skip-zlib         Do not compile and use zlib

   Note that some packages may depend on others. For example,
   OpenGL support with Allegro requires AllegroGL.
"

	exit 0
done

# --
# If we're uninstalling, skip everything else.
ifopt uninstall goto install

# **********************************************************************
# Target system
do ifopt --system
	TARGET_SYSTEM = "$('getoptval' --system)"
else
	TARGET_SYSTEM = 'Native'
done

# Detect platform.
PLATFORM = 'Generic'
ifplat unix	PLATFORM = 'Unix (Generic)'
ifplat linux	PLATFORM = 'Linux'
ifplat macosx	PLATFORM = 'Mac OS X'
ifplat msdos	PLATFORM = 'DOS'
ifplat win32	PLATFORM = 'Windows'

# Path separator.
PATH_SEPARATOR = '/'
ifplat msdos	PATH_SEPARATOR = '\'
ifplat win32	PATH_SEPARATOR = '\'

PATH_SEP = "${PATH_SEPARATOR}"

# Platform directory. This holds things like object files, and executables.
PLATFORM_DIRECTORY = 'Unknown'
ifplat unix	PLATFORM_DIRECTORY = 'Unix'
ifplat linux	PLATFORM_DIRECTORY = 'Linux'
ifplat macosx	PLATFORM_DIRECTORY = 'Mac'
ifplat msdos	PLATFORM_DIRECTORY = 'DOS'
ifplat win32	PLATFORM_DIRECTORY = 'Windows'

# Append system identifier.
PLATFORM_DIRECTORY += "-${TARGET_SYSTEM}"

PLATFORM_PATH = "${PLATFORM_DIRECTORY}${PATH_SEPARATOR}"

do ifopt --verbose
	echo "TARGET_SYSTEM: ${TARGET_SYSTEM}"
	echo "PLATFORM: ${PLATFORM}"
	echo "PATH_SEPARATOR: ${PATH_SEPARATOR}"
	echo "PLATFORM_DIRECTORY: ${PLATFORM_DIRECTORY}"
	echo "PLATFORM_PATH: ${PLATFORM_PATH}"
done

# --
# Source tree paths. These are where our files come from.
BUILD_DIRECTORY = "Build"
BUILD_PATH = "${BUILD_DIRECTORY}${PATH_SEPARATOR}"

FRAMEWORK_DIRECTORY = "Frameworks"
FRAMEWORK_PATH	= "${FRAMEWORK_DIRECTORY}${PATH_SEPARATOR}"

SOURCE_DIRECTORY = "Sources"
SOURCE_PATH = "${SOURCE_DIRECTORY}${PATH_SEPARATOR}"

RESOURCE_DIRECTORY = "Resources"
RESOURCE_PATH = "${RESOURCE_DIRECTORY}${PATH_SEPARATOR}"

do ifopt --verbose
	echo "BUILD_DIRECTORY: ${BUILD_DIRECTORY}"
	echo "BUILD_PATH: ${BUILD_PATH}"
	echo "FRAMEWORK_DIRECTORY: ${FRAMEWORK_DIRECTORY}"
	echo "FRAMEWORK_PATH: ${FRAMEWORK_PATH}"
	echo "SOURCE_DIRECTORY: ${SOURCE_DIRECTORY}"
	echo "SOURCE_PATH: ${SOURCE_PATH}"
	echo "RESOURCE_DIRECTORY: ${RESOURCE_DIRECTORY}"
	echo "RESOURCE_PATH: ${RESOURCE_PATH}"
done

# --
# Build type.
BUILD_TYPE = 'Generic'
ifopt --debug		BUILD_TYPE = 'Debug'
ifopt --optimize	BUILD_TYPE = 'Optimized'
ifopt --profile		BUILD_TYPE = 'Profile'

BUILD_NAME = "${PLATFORM} (${TARGET_SYSTEM}, ${BUILD_TYPE})"
ifnopt clean	echo "Building for ${BUILD_NAME}."
ifopt clean	echo "Cleaning up ${BUILD_NAME} files."

# Compile path, specific to each build.
COMPILE_DIRECTORY = "${PLATFORM_PATH}${BUILD_TYPE}"
COMPILE_PATH = "${COMPILE_DIRECTORY}${PATH_SEPARATOR}"

do ifopt --verbose
	echo "BUILD_TYPE: ${BUILD_TYPE}"
	echo "BUILD_NAME: ${BUILD_NAME}"
	echo "COMPILE_DIRECTORY: ${COMPILE_DIRECTORY}"
	echo "COMPILE_PATH: ${COMPILE_PATH}"
done

OBJ_DIR = "${COMPILE_DIRECTORY}"
DEP_DIR = "${COMPILE_DIRECTORY}"

# --
# Executable name.
EXECUTABLE_NAME = 'FakeNES'
# Executable location, specific to each build.
EXECUTABLE = "${COMPILE_PATH}${EXECUTABLE_NAME}"

do ifopt --verbose
	echo "EXECUTABLE_NAME: ${EXECUTABLE_NAME}"
	echo "EXECUTABLE: ${EXECUTABLE}"
done

# Separate compile paths are used for Sources and Frameworks.
COMPILE_FRAMEWORKS_DIRECTORY = "${COMPILE_PATH}${FRAMEWORK_DIRECTORY}"
COMPILE_FRAMEWORKS_PATH = "${COMPILE_FRAMEWORKS_DIRECTORY}${PATH_SEPARATOR}"

COMPILE_SOURCES_DIRECTORY = "${COMPILE_PATH}${SOURCE_DIRECTORY}"
COMPILE_SOURCES_PATH = "${COMPILE_SOURCES_DIRECTORY}${PATH_SEPARATOR}"

do ifopt --verbose
	echo "COMPILE_FRAMEWORKS_DIRECTORY: ${COMPILE_FRAMEWORKS_DIRECTORY}"
	echo "COMPILE_FRAMEWORKS_PATH: ${COMPILE_FRAMEWORKS_PATH}"
	echo "COMPILE_SOURCES_DIRECTORY: ${COMPILE_SOURCES_DIRECTORY}"
	echo "COMPILE_SOURCES_PATH: ${COMPILE_SOURCES_PATH}"
done

# Source groups.
GROUP_AUDIO = Audio
GROUP_CORE = Core
GROUP_GUI = GUI
GROUP_MAPPERS = Mappers
GROUP_NETWORK = Network
GROUP_PLATFORM = Platform
GROUP_SYSTEM = System
GROUP_TOOLKIT = Toolkit
GROUP_VIDEO = Video

# Compile directories for each group.
COMPILE_AUDIO_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_AUDIO}"
COMPILE_CORE_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_CORE}"
COMPILE_GUI_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_GUI}"
COMPILE_MAPPERS_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_MAPPERS}"
COMPILE_NETWORK_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_NETWORK}"
COMPILE_PLATFORM_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_PLATFORM}"
COMPILE_SYSTEM_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_SYSTEM}"
COMPILE_TOOLKIT_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_TOOLKIT}"
COMPILE_VIDEO_DIRECTORY = "${COMPILE_SOURCES_PATH}${GROUP_VIDEO}"

# Create missing directories.
do ifnopt clean
	ifnexist "${PLATFORM_DIRECTORY}"		@mkdir "${PLATFORM_DIRECTORY}"
	ifnexist "${COMPILE_DIRECTORY}"			@mkdir "${COMPILE_DIRECTORY}"
	ifnexist "${COMPILE_FRAMEWORKS_DIRECTORY}"	@mkdir "${COMPILE_FRAMEWORKS_DIRECTORY}"
	ifnexist "${COMPILE_SOURCES_DIRECTORY}"		@mkdir "${COMPILE_SOURCES_DIRECTORY}"
	ifnexist "${COMPILE_AUDIO_DIRECTORY}"		@mkdir "${COMPILE_AUDIO_DIRECTORY}"
	ifnexist "${COMPILE_CORE_DIRECTORY}"		@mkdir "${COMPILE_CORE_DIRECTORY}"
	ifnexist "${COMPILE_GUI_DIRECTORY}"		@mkdir "${COMPILE_GUI_DIRECTORY}"
	ifnexist "${COMPILE_MAPPERS_DIRECTORY}"		@mkdir "${COMPILE_MAPPERS_DIRECTORY}"
	ifnexist "${COMPILE_NETWORK_DIRECTORY}"		@mkdir "${COMPILE_NETWORK_DIRECTORY}"
	ifnexist "${COMPILE_PLATFORM_DIRECTORY}"	@mkdir "${COMPILE_PLATFORM_DIRECTORY}"
	ifnexist "${COMPILE_SYSTEM_DIRECTORY}"		@mkdir "${COMPILE_SYSTEM_DIRECTORY}"
	ifnexist "${COMPILE_TOOLKIT_DIRECTORY}"		@mkdir "${COMPILE_TOOLKIT_DIRECTORY}"
	ifnexist "${COMPILE_VIDEO_DIRECTORY}"		@mkdir "${COMPILE_VIDEO_DIRECTORY}"
done

# Keep a list so we know which ones to remove later.
CLEAN_DIRECTORIES = ''
CLEAN_DIRECTORIES := "${COMPILE_AUDIO_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_CORE_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_GUI_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_MAPPERS_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_NETWORK_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_PLATFORM_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_SYSTEM_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_TOOLKIT_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_VIDEO_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_SOURCES_DIRECTORY}"

# File list stubs (we will append to these later).
CLEAN_FILES = ''
SOURCE_FILES = ''

# **********************************************************************
# Default compiler and linker flags.
CPPFLAGS = "-I${SOURCE_PATH} -I${COMPILE_PATH}"
CFLAGS = '-O2 -g'
LDFLAGS = ''

# Compiler flags for compiling bootstrap utilities. These can come from other
# sources than our project, so it is best to disable warnings.
BOOTSTRAP_CFLAGS = "${CFLAGS} -w"

# Overrides for individual build types.
CFLAGS := "-march=${TARGET_SYSTEM}"

do ifopt --debug
	CPPFLAGS := '-DENABLE_DEBUG=1'
	CFLAGS = "-O0 -g$('getoptval' --debug-level)"
done

do ifopt --optimize
	CFLAGS = '-Os -ffast-math -finline-functions-called-once -finline-limit=100000 -fomit-frame-pointer -s'
	ifplat i386	CFLAGS := '-mfpmath=sse,387'
	ifplat x64	CFLAGS := '-mfpmath=sse,387'
done

do ifopt --profile
	CPPFLAGS := '-DENABLE_PROFILE=1'
	CFLAGS = '-O2 -pg'
	LDFLAGS := '-pg'
done

do ifnplat msdos
	CFLAGS := '-pipe'
	LDFLAGS := '-pipe'
done

# Compiler standards and warnings.
CFLAGS := '-pedantic -Wall -Wextra -Wno-inline -Wno-unused -Werror'
CXXFLAGS = "${CFLAGS} -std=c++98"
CFLAGS := '-std=c99'
LDFLAGS := '-lm -lstdc++'

# Platform support.
# POSIX should be defined on all Unix-compatible operating systems
# (generic Unices, Linux, Mac OS X and BSD).
ifplat unix CPPFLAGS := '-DSYSTEM_POSIX=1'
ifnplat unix CPPFLAGS := '-DSYSTEM_NONPOSIX=1'

ifplat msdos	CPPFLAGS := '-DSYSTEM_DOS=1'
ifplat linux    CPPFLAGS := '-DSYSTEM_LINUX=1'
ifplat macosx	CPPFLAGS := '-DSYSTEM_MACOSX=1'

do ifplat win32
	CPPFLAGS := '-DSYSTEM_WINDOWS=1'
	LDFLAGS := '-mwindows'
done

# --
# Redirection for stdout and stderr.
STDOUT_LOG = "${BUILD_PATH}stdout.log"
STDERR_LOG = "${BUILD_PATH}stderr.log"

CLEAN_FILES := "${STDOUT_LOG} ${STDERR_LOG}"

do ifopt --verbose
	echo "STDOUT_LOG: ${STDOUT_LOG}"
	echo "STDERR_LOG: ${STDERR_LOG}"
done

# For the clean target, we want a quieter bootstrap.
QUIET_BOOTSTRAP = 'false'
ifopt clean	QUIET_BOOTSTRAP = 'true'

ifopt --verbose echo "QUIET_BOOTSTRAP: ${QUIET_BOOTSTRAP}"

# Optional packages.
# IMPORTANT: Keep these in order of dependancy.
ifnopt --skip-allegro		invoke "${BUILD_PATH}Allegro.cfg"
ifnopt --skip-sdl		invoke "${BUILD_PATH}SDL.cfg"

ifnopt --skip-pthreads		invoke "${BUILD_PATH}pthreads.cfg"
ifnopt --skip-hawknl    	invoke "${BUILD_PATH}HawkNL.cfg"
ifnopt --skip-hawkthreads	invoke "${BUILD_PATH}HawkThreads.cfg"

ifnopt --skip-openal		invoke "${BUILD_PATH}OpenAL.cfg"

ifnopt --skip-opengl		invoke "${BUILD_PATH}OpenGL.cfg"
ifnopt --skip-allegrogl		invoke "${BUILD_PATH}AllegroGL.cfg"

ifnopt --skip-zlib      	invoke "${BUILD_PATH}zlib.cfg"

# Mandatory packages. These are always required and can't be disabled.
invoke "${BUILD_PATH}UTF8-CPP.cfg"

# Frameworks have to be cleaned last.
CLEAN_DIRECTORIES := "${COMPILE_FRAMEWORKS_DIRECTORY}"
CLEAN_DIRECTORIES := "${COMPILE_DIRECTORY}"
CLEAN_DIRECTORIES := "${PLATFORM_DIRECTORY}"

# **********************************************************************
# Our little configure script. =)
CONFIG_SOURCE = "${BUILD_PATH}Configure.c"
CONFIG_TOOL = "${BUILD_PATH}Configure${EXE_EXT}"
CONFIG_HEADER = "${COMPILE_PATH}Configure.h"

CONFIG_COMMAND = "${CONFIG_TOOL} ${CONFIG_HEADER}"

do ifnopt clean
	do ifnexist "${CONFIG_HEADER}"
		if "${QUIET_BOOTSTRAP}"='false' echo "Bootstrap: Checking system configuration."

		do ifnexist "${CONFIG_TOOL}"
			ifopt --verbose echo "Bootstrap: Compiling ${CONFIG_SOURCE}."

			# The configure tool needs to be compiled with the normal CFLAGS
			# so that it has access to the build configuration.
			@!call "${CC} -o ${CONFIG_TOOL} ${CONFIG_SOURCE} ${CPPFLAGS} ${CFLAGS}"
			do ifnret 0
				echo "Uh-oh, it looks like ${CONFIG_SOURCE} failed to build."
				echo 'Exiting.'
				exit 1
			done
		done

		do ifopt --verbose
			echo "Bootstrap: Creating ${CONFIG_HEADER}."
			echo "${CONFIG_COMMAND}"
		done

		@!call "${CONFIG_COMMAND}" 
		do ifnret 0
			echo "Uh-oh it looks like ${CONFIG_TOOL} failed to run."
			echo 'Exiting.'
			exit 1
		done
	done

	ifopt --verbose echo "Bootstrap: Adding ${CONFIG_HEADER}."
	CPPFLAGS := "-imacros ${CONFIG_HEADER}"
done

CLEAN_FILES := "${CONFIG_HEADER} ${CONFIG_TOOL}"

# --
# Datafile conversion.
DATAFILE = "${RESOURCE_PATH}FakeNES.dat"

# Allegro's dat2c utility, included in our tree for convenience.
DAT2C_SOURCE = "${BUILD_PATH}dat2c.c"
DAT2C_TOOL = "${BUILD_PATH}dat2c${EXE_EXT}"

DATA_SOURCE = "${COMPILE_PATH}Data.c"
DATA_HEADER = "${COMPILE_PATH}Data.h"
DATA_OBJECT = "${COMPILE_PATH}Data.o"

DAT2C_COMMAND = "${DAT2C_TOOL} -o ${DATA_SOURCE} -h ${DATA_HEADER} -p datafile ${DATAFILE}"

# This should be compiled with the same compiler flags as our project,
# as it will be linked to it eventually.
DATA_COMMAND = "${CC} -c ${DATA_SOURCE} -o ${DATA_OBJECT} ${CPPFLAGS} ${CFLAGS}"

do ifnopt clean
	do ifnexist "${DATA_OBJECT}"
		if "${QUIET_BOOTSTRAP}"='false' echo "Bootstrap: Processing ${DATAFILE}."

		do ifnexist "${DATA_SOURCE}"
			do ifnexist "${DAT2C_TOOL}"
				ifopt --verbose echo "Bootstrap: Compiling ${DAT2C_SOURCE}."
				@!call "${CC} -o ${DAT2C_TOOL} ${DAT2C_SOURCE} ${BOOTSTRAP_CFLAGS} ${DAT2C_FLAGS}"
				do ifnret 0
					echo "Uh-oh, it looks like ${DAT2C_SOURCE} failed to build."
					echo 'Exiting.'
					exit 1
				done
			done

			do ifopt --verbose
				echo "Bootstrap: Creating ${DATA_SOURCE} and ${DATA_HEADER}."
				echo "${DAT2C_COMMAND}"
			done

			setstdout "${STDOUT_LOG}"
			@!call "${DAT2C_COMMAND}"
			setstdout ''

			do ifnret 0
				echo "Uh-oh, it looks like ${DAT2C_TOOL} failed to run."
				echo 'Exiting.'
				exit 1
			done
		done

		do ifopt --verbose
			echo "Bootstrap: Compiling ${DATA_SOURCE}."
			echo "${DATA_COMMAND}"
		done

		@!call "${DATA_COMMAND}"
		do ifnret 0
			echo "Uh-oh, it looks like ${DATA_SOURCE} failed to compile."
			echo 'Exiting.'
			exit 1
		done
	done

	ifopt --verbose echo "Bootstrap: Adding ${DATA_OBJECT}."
	LDFLAGS := "${DATA_OBJECT}"
done

CLEAN_FILES := "${DATA_SOURCE} ${DATA_HEADER} ${DATA_OBJECT} ${DAT2C_TOOL}"

# --
# Unix resources.
do ifplat unix
	RESOURCE_SOURCE = "${RESOURCE_PATH}X.rc"

	if "${QUIET_BOOTSTRAP}"='false' echo "Bootstrap: Processing ${RESOURCE_SOURCE}."
	ifopt --verbose echo "Bootstrap: Adding ${RESOURCE_SOURCE}."
	SOURCE_FILES := "${RESOURCE_SOURCE}"
done

# Windows resources.
do ifplat win32
	RESOURCE_SOURCE = "${RESOURCE_PATH}Windows.rc"
	RESOURCE_OBJECT = "${COMPILE_PATH}Windows.o"

	# Windes is used to generate the object file.
	RESOURCE_COMMAND = "windres ${RESOURCE_SOURCE} -O coff -o ${RESOURCE_OBJECT}"

	do ifnopt clean
		if "${QUIET_BOOTSTRAP}"='false' echo "Bootstrap: Processing ${RESOURCE_SOURCE}."

		do ifnexist "${RESOURCE_OBJECT}"
			do ifopt --verbose
				echo "Bootstrap: Compiling ${RESOURCE_SOURCE}."
				echo "${RESOURCE_COMMAND}"
			done

			@!call "${RESOURCE_COMMAND}"
			do ifnret 0
				echo "Uh-oh, it looks like ${RESOURCE_SOURCE} failed to compile."
				echo 'Exiting.'
				exit 1
			done
		done

		ifopt --verbose echo "Bootstrap: Adding ${RESOURCE_OBJECT}."
		LDFLAGS := "${RESOURCE_OBJECT}"
	done

	CLEAN_FILES := "${RESOURCE_OBJECT}"
done

# --
# Source paths.
src_paths ""

SOURCE_PATH_AUDIO = "${SOURCE_PATH}${GROUP_AUDIO}${PATH_SEPARATOR}"
SOURCE_PATH_CORE = "${SOURCE_PATH}${GROUP_CORE}${PATH_SEPARATOR}"
SOURCE_PATH_GUI = "${SOURCE_PATH}${GROUP_GUI}${PATH_SEPARATOR}"
SOURCE_PATH_MAPPERS = "${SOURCE_PATH}${GROUP_MAPPERS}${PATH_SEPARATOR}"
SOURCE_PATH_NETWORK = "${SOURCE_PATH}${GROUP_NETWORK}${PATH_SEPARATOR}"
SOURCE_PATH_PLATFORM = "${SOURCE_PATH}${GROUP_PLATFORM}${PATH_SEPARATOR}"
SOURCE_PATH_SYSTEM = "${SOURCE_PATH}${GROUP_SYSTEM}${PATH_SEPARATOR}"
SOURCE_PATH_TOOLKIT = "${SOURCE_PATH}${GROUP_TOOLKIT}${PATH_SEPARATOR}"
SOURCE_PATH_VIDEO = "${SOURCE_PATH}${GROUP_VIDEO}${PATH_SEPARATOR}"

# Source files.
SOURCE_FILES := "${SOURCE_PATH_AUDIO}APU.cpp"
SOURCE_FILES := "${SOURCE_PATH_AUDIO}Audio.cpp"
SOURCE_FILES := "${SOURCE_PATH_AUDIO}AudioLib.cpp"
SOURCE_FILES := "${SOURCE_PATH_AUDIO}ExSound.cpp"
SOURCE_FILES := "${SOURCE_PATH_AUDIO}MMC5.cpp"
SOURCE_FILES := "${SOURCE_PATH_AUDIO}VRC6.cpp"

SOURCE_FILES := "${SOURCE_PATH_CORE}Core.cpp"
SOURCE_FILES := "${SOURCE_PATH_CORE}CPU.cpp"
SOURCE_FILES := "${SOURCE_PATH_CORE}Patch.cpp"

SOURCE_FILES := "${SOURCE_PATH_PLATFORM}File.cpp"
SOURCE_FILES := "${SOURCE_PATH_PLATFORM}Unzip.c"

SOURCE_FILES := "${SOURCE_PATH_TOOLKIT}CRC32.cpp"
SOURCE_FILES := "${SOURCE_PATH_TOOLKIT}MD5.c"
SOURCE_FILES := "${SOURCE_PATH_TOOLKIT}Unicode.cpp"

SOURCE_FILES := "${SOURCE_PATH_VIDEO}Background.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}Color.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}HQX.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}NTSC.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}PPU.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}Renderer.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}Sprites.cpp"
SOURCE_FILES := "${SOURCE_PATH_VIDEO}Video.cpp"

do ifopt --verbose
	echo "CPPFLAGS: ${CPPFLAGS}"
	echo "CFLAGS: ${CFLAGS}"
	echo "CXXFLAGS: ${CXXFLAGS}"
	echo "LDFLAGS: ${LDFLAGS}"
	echo "SOURCE_FILES: ${SOURCE_FILES}"
	echo "CLEAN_FILES: ${CLEAN_FILES}"
	echo "CLEAN_DIRECTORIES: ${CLEAN_DIRECTORIES}"
done

# **********************************************************************
# Default (build & install) target.

# If we're just cleaning, skip compilation.
ifopt clean goto clean

compile ${SOURCE_FILES}
linkexec "${EXECUTABLE}"

# Now we can install the compiled executable, if needed.
ifopt install goto install
exit 0

# --
# Install and uninstall targets.
:install
do ifnplat unix
	echo 'The install target is only valid for Unix-like platforms.'
	exit 1
done

PREFIX = '/usr/bin'
do ifnopt --prefix
	echo 'By default, program files will be installed into /usr/bin.'
	echo 'If this is not what you want, you can run CBuild manually with the --prefix option.'
done

do ifopt --prefix
	PREFIX = "$('getoptval' --prefix)"
	echo "Installation path set to ${PREFIX}."
done

# When installing, we use a lower-case executable name for consistency.
INSTALLED_NAME = "fakenes"
INSTALLED_FILE = "${PREFIX}/${INSTALLED_NAME}"

# If we're just uninstalling, skip installation.
ifopt uninstall goto uninstall

echo "Installing ${INSTALLED_FILE}."
@call "install -c -m 0755 ${EXECUTABLE} ${INSTALLED_FILE}"
exit 0

:uninstall
echo "Deleting ${INSTALLED_FILE}."
!rm "${INSTALLED_FILE}"
exit 0

# --
# Clean target.
:clean
!rmobj	${SOURCE_FILES}
!rmexec	${EXECUTABLE}
!rm	${CLEAN_FILES}
!rm	${CLEAN_DIRECTORIES}
exit 0
