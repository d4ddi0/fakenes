# Options.
ASM_CORE ?= 1

# Tools.
CC = gcc
NASM ?= nasm
MKDIR = mkdir -p
RMDIR = rmdir
RM = rm -f

# Paths.
SOURCE_PATH = .
INCLUDE_PATH = ${SOURCE_PATH}/include
OBJECT_PATH = ${SOURCE_PATH}/build/djgpp
BINARY_PATH ?= .

# Extensions.
EXEEXT ?= .exe
OBJEXT ?= .o

# Binaries.
BINARY := ${BINARY_PATH}/fakenes${EXEEXT}
BINARY_DEBUG := ${BINARY_PATH}/fakenesd${EXEEXT}
COREOFF = ${BINARY_PATH}/coreoff${EXEEXT}
OFFSETS_INC = ${INCLUDE_PATH}/core/x86/offsets.inc

# GCC flags.
TARGET_ARCH ?= i486
TARGET_CPU ?= i686
MFLAGS := -march=${TARGET_ARCH} -mtune=${TARGET_CPU}
ifdef DEBUG
    OFLAGS = -O0 -g -ggdb3
    DFLAGS = -DDEBUG -DLSB_FIRST
else
    OFLAGS = -O3 -fomit-frame-pointer -fno-exceptions \
    -funroll-loops -ffast-math -fforce-addr -fforce-mem -fstrength-reduce \
    -fthread-jumps -fexpensive-optimizations -foptimize-sibling-calls \
    -fstrict-aliasing -maccumulate-outgoing-args -fschedule-insns \
    -fschedule-insns2
    DFLAGS = -DLSB_FIRST
endif
ifndef NO_ZLIB
    DFLAGS += -DUSE_ZLIB
endif
ifneq (${ASM_CORE}, 0)
    DFLAGS += -DNO_C_CORE
endif
CFLAGS := -I${INCLUDE_PATH} ${MFLAGS} ${OFLAGS} -Wall -Wno-unused ${DFLAGS}

# NASM flags.
ifdef DEBUG
    NASMOFLAGS = -g
else
    NASMOFLAGS = -O3
endif
NASMFLAGS := -I${INCLUDE_PATH}/ ${NASMOFLAGS} -f coff -DC_LABELS_PREFIX=_

# Objects.
OBJECTS := ${OBJECT_PATH}/apu${OBJEXT} \
    ${OBJECT_PATH}/audio${OBJEXT} \
    ${OBJECT_PATH}/core${OBJEXT} \
    ${OBJECT_PATH}/cpu${OBJEXT} \
    ${OBJECT_PATH}/data${OBJEXT} \
    ${OBJECT_PATH}/gui${OBJEXT} \
    ${OBJECT_PATH}/input${OBJEXT} \
    ${OBJECT_PATH}/papu${OBJEXT} \
    ${OBJECT_PATH}/ppu${OBJEXT} \
    ${OBJECT_PATH}/rom${OBJEXT} \
    ${OBJECT_PATH}/main${OBJEXT} \
    ${OBJECT_PATH}/mmc${OBJEXT} \
    ${OBJECT_PATH}/netplay${OBJEXT} \
    ${OBJECT_PATH}/video${OBJEXT} \
    ${OBJECT_PATH}/crc32${OBJEXT} \
    ${OBJECT_PATH}/unzip${OBJEXT}
ifneq (${ASM_CORE}, 0)
    OBJECTS += ${OBJECT_PATH}/corex86${OBJEXT}
endif

# Libraries.
LIBALLEG ?= -lalleg
LIBRARIES := ${LIBALLEG}
ifndef NO_ZLIB
    LIBZ ?= -lz
    LIBRARIES += ${LIBZ}
endif

# Targets.
.PHONY: all bootstrap clean distclean
ifdef DEBUG
    all: ${BINARY_DEBUG}
else
    all: ${BINARY}
endif
bootstrap:
	@echo Building.
	${MKDIR} ${OBJECT_PATH}
${BINARY}: bootstrap \
    ${OBJECTS}
	${CC} ${OBJECTS} -o ${BINARY} -s ${LIBRARIES}
${BINARY_DEBUG}: bootstrap \
    ${OBJECTS}
	${CC} ${OBJECTS} -o ${BINARY_DEBUG} -g -ggdb3 ${LIBRARIES}
${OFFSETS_INC}: \
    ${SOURCE_PATH}/coreoff.c \
    ${INCLUDE_PATH}/core.h \
    ${INCLUDE_PATH}/misc.h
	${CC} $< -o ${COREOFF} -I${INCLUDE_PATH} -DOUTPUT=\"${OFFSETS_INC}\" ${LIBALLEG}
	${COREOFF}
	${RM} ${COREOFF}
.SUFFIXES: .asm .c
${OBJECT_PATH}/%${OBJEXT}: \
    %.asm
	${NASM} $< -o $@ ${NASMFLAGS}
${OBJECT_PATH}/%${OBJEXT}: \
    %.c
	${CC} -c $< -o $@ ${CFLAGS}

include build/common.mk

clean:
	${RM} ${OBJECTS} ${BINARY} ${BINARY_DEBUG}

distclean: clean
	-${RMDIR} ${OBJECT_PATH}
	${RM} ${COREOFF} ${OFFSETS_INC}
