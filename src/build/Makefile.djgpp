# Tools.
CC = gcc
MKDIR = mkdir -p
RMDIR = rmdir
RM = rm -f

# Paths.
SOURCE_PATH = .
INCLUDE_PATH = ${SOURCE_PATH}/include
OBJECT_PATH = ${SOURCE_PATH}/build/djgpp
BINARY_PATH ?= .

# Dependancies.
DEPEND ?= ${OBJECT_PATH}/depend.mk

# Extensions.
SRCEXT := .c
EXEEXT ?= .exe
OBJEXT ?= .o

# Binaries.
BINARY := ${BINARY_PATH}/fakenes${EXEEXT}
BINARY_DEBUG := ${BINARY_PATH}/fakenesd${EXEEXT}

# GCC flags.
TARGET_ARCH ?= i586
MFLAGS := -march=${TARGET_ARCH}
ifdef DEBUG
   OFLAGS = -O0 -g3
   DFLAGS = -DDEBUG -DLSB_FIRST
else
   OFLAGS = -pipe -O3 -ffast-math -fomit-frame-pointer
   DFLAGS = -DLSB_FIRST
endif
ifndef NO_ZLIB
   DFLAGS += -DUSE_ZLIB
endif
ifdef TAG
   DFLAGS += -DVERSION_TAG=\"${TAG}\"
endif
CFLAGS := -I${INCLUDE_PATH} ${MFLAGS} ${OFLAGS} -Wall -Wno-unused ${DFLAGS}

# Objects.
OBJECTS := ${OBJECT_PATH}/apu${OBJEXT} \
   ${OBJECT_PATH}/audio${OBJEXT} \
   ${OBJECT_PATH}/core${OBJEXT} \
   ${OBJECT_PATH}/cpu${OBJEXT} \
   ${OBJECT_PATH}/crc${OBJEXT} \
   ${OBJECT_PATH}/data${OBJEXT} \
   ${OBJECT_PATH}/dsp${OBJEXT} \
   ${OBJECT_PATH}/gui${OBJEXT} \
   ${OBJECT_PATH}/hq${OBJEXT} \
   ${OBJECT_PATH}/input${OBJEXT} \
   ${OBJECT_PATH}/log${OBJEXT} \
   ${OBJECT_PATH}/main${OBJEXT} \
   ${OBJECT_PATH}/mmc${OBJEXT} \
   ${OBJECT_PATH}/nes_ntsc${OBJEXT} \
   ${OBJECT_PATH}/net${OBJEXT} \
   ${OBJECT_PATH}/netplay${OBJEXT} \
   ${OBJECT_PATH}/platform${OBJEXT} \
   ${OBJECT_PATH}/ppu${OBJEXT} \
   ${OBJECT_PATH}/rom${OBJEXT} \
   ${OBJECT_PATH}/save${OBJEXT} \
   ${OBJECT_PATH}/unzip${OBJEXT} \
   ${OBJECT_PATH}/video${OBJEXT}

# Libraries.
LIBALLEG ?= -lalleg
LIBRARIES := ${LIBALLEG}
ifndef NO_ZLIB
   LIBZ ?= -lz
   LIBRARIES += ${LIBZ}
endif

# Dependancies.
-include ${DEPEND}
include build/common.mk

# Targets.
.PHONY: all clean depend distclean
ifdef DEBUG
   all: ${BINARY_DEBUG}
else
   all: ${BINARY}
endif
${OBJECT_PATH}:
	${MKDIR} ${OBJECT_PATH}
${DEPEND}: ${OBJECT_PATH}
	@echo Generating dependancy list.
	${CC} -DDEPENDANCIES_ONLY -MM -MG *${SRCEXT} ${CPPFLAGS} > ${DEPEND}
depend: ${DEPEND}
${BINARY}: ${OBJECTS}
	@echo Building.
	${CC} ${OBJECTS} -o ${BINARY} -s ${LIBRARIES}
${BINARY_DEBUG}: ${OBJECTS}
	@echo Building.
	${CC} ${OBJECTS} -o ${BINARY_DEBUG} -g3 ${LIBRARIES}
.SUFFIXES: .c
${OBJECT_PATH}/%${OBJEXT}: %.c
	${CC} ${CFLAGS} -c $< -o $@

clean:
	${RM} ${OBJECTS} ${BINARY} ${BINARY_DEBUG}

distclean: clean
	${RM} ${DEPEND}
	-${RMDIR} ${OBJECT_PATH}
	${RM} ${COREOFF} ${OFFSETS_INC}
